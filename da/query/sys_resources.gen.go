// Code generated by "zld-jy/da/field". DO NOT EDIT.
// Code generated by "zld-jy/da/field". DO NOT EDIT.
// Code generated by "zld-jy/da/field". DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"zld-jy/da/field"

	"gorm.io/plugin/dbresolver"

	"zld-jy/da/model"
)

func newSysResource(db *gorm.DB) sysResource {
	_sysResource := sysResource{}

	_sysResource.sysResourceDo.UseDB(db)
	_sysResource.sysResourceDo.UseModel(&model.SysResource{})

	tableName := _sysResource.sysResourceDo.TableName()
	_sysResource.ALL = field.NewAsterisk(tableName)
	_sysResource.Id10 = field.NewInt64(tableName, "Id10")
	_sysResource.SysId10 = field.NewInt64(tableName, "Sys_Id10")
	_sysResource.ResourceIdentity = field.NewString(tableName, "Resource_Identity")
	_sysResource.ResourceType = field.NewInt32(tableName, "Resource_Type")
	_sysResource.ResourceStatus = field.NewInt32(tableName, "Resource_Status")
	_sysResource.ResourceActopnType = field.NewInt32(tableName, "Resource_Actopn_Type")
	_sysResource.ResourceActionIdentity = field.NewString(tableName, "Resource_Action_Identity")
	_sysResource.ResourceDesc = field.NewString(tableName, "Resource_Desc")
	_sysResource.ResourceOrders = field.NewInt32(tableName, "Resource_Orders")
	_sysResource.InsertDateTime4 = field.NewTime(tableName, "Insert_Date_Time4")
	_sysResource.InsertUser3 = field.NewInt64(tableName, "Insert_User3")
	_sysResource.UpdateDateTime3 = field.NewTime(tableName, "Update_Date_Time3")
	_sysResource.UpdateUser3 = field.NewInt64(tableName, "Update_User3")
	_sysResource.Version4 = field.NewInt32(tableName, "Version4")
	_sysResource.Deleted3 = field.NewString(tableName, "Deleted3")
	_sysResource.CompayId3 = field.NewInt64(tableName, "Compay_Id3")

	_sysResource.fillFieldMap()

	return _sysResource
}

type sysResource struct {
	sysResourceDo sysResourceDo

	ALL                    field.Asterisk
	Id10                   field.Int64  // 资源Id
	SysId10                field.Int64  // 资源Id
	ResourceIdentity       field.String // 资源标示
	ResourceType           field.Int32  // 资源类型(0 app   1 模块  2  菜单 3  页面 4  按钮 5  扩展按钮)
	ResourceStatus         field.Int32  // 资源状态(0:正常 1 :停用)
	ResourceActopnType     field.Int32  // 资源动作类型 (-1 无 1.增加;2 删 3 改 4 上传 5导出 6 查询 .)
	ResourceActionIdentity field.String // 资源动作标示(针对扩展按钮，备用字段)
	ResourceDesc           field.String // 资源描述
	ResourceOrders         field.Int32  // 资源序序号
	InsertDateTime4        field.Time   // 插入时间
	InsertUser3            field.Int64  // 插入用户
	UpdateDateTime3        field.Time   // 更新时间
	UpdateUser3            field.Int64  // 更新用户
	Version4               field.Int32  // 版本
	Deleted3               field.String // 删除标志
	CompayId3              field.Int64  // 公司

	fieldMap map[string]field.Expr
}

func (s sysResource) Table(newTableName string) *sysResource {
	s.sysResourceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysResource) As(alias string) *sysResource {
	s.sysResourceDo.DO = *(s.sysResourceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysResource) updateTableName(table string) *sysResource {
	s.ALL = field.NewAsterisk(table)
	s.Id10 = field.NewInt64(table, "Id10")
	s.SysId10 = field.NewInt64(table, "Sys_Id10")
	s.ResourceIdentity = field.NewString(table, "Resource_Identity")
	s.ResourceType = field.NewInt32(table, "Resource_Type")
	s.ResourceStatus = field.NewInt32(table, "Resource_Status")
	s.ResourceActopnType = field.NewInt32(table, "Resource_Actopn_Type")
	s.ResourceActionIdentity = field.NewString(table, "Resource_Action_Identity")
	s.ResourceDesc = field.NewString(table, "Resource_Desc")
	s.ResourceOrders = field.NewInt32(table, "Resource_Orders")
	s.InsertDateTime4 = field.NewTime(table, "Insert_Date_Time4")
	s.InsertUser3 = field.NewInt64(table, "Insert_User3")
	s.UpdateDateTime3 = field.NewTime(table, "Update_Date_Time3")
	s.UpdateUser3 = field.NewInt64(table, "Update_User3")
	s.Version4 = field.NewInt32(table, "Version4")
	s.Deleted3 = field.NewString(table, "Deleted3")
	s.CompayId3 = field.NewInt64(table, "Compay_Id3")

	s.fillFieldMap()

	return s
}

func (s *sysResource) WithContext(ctx context.Context) *sysResourceDo {
	return s.sysResourceDo.WithContext(ctx)
}

func (s sysResource) TableName() string { return s.sysResourceDo.TableName() }

func (s sysResource) Alias() string { return s.sysResourceDo.Alias() }

func (s *sysResource) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysResource) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["Id10"] = s.Id10
	s.fieldMap["Sys_Id10"] = s.SysId10
	s.fieldMap["Resource_Identity"] = s.ResourceIdentity
	s.fieldMap["Resource_Type"] = s.ResourceType
	s.fieldMap["Resource_Status"] = s.ResourceStatus
	s.fieldMap["Resource_Actopn_Type"] = s.ResourceActopnType
	s.fieldMap["Resource_Action_Identity"] = s.ResourceActionIdentity
	s.fieldMap["Resource_Desc"] = s.ResourceDesc
	s.fieldMap["Resource_Orders"] = s.ResourceOrders
	s.fieldMap["Insert_Date_Time4"] = s.InsertDateTime4
	s.fieldMap["Insert_User3"] = s.InsertUser3
	s.fieldMap["Update_Date_Time3"] = s.UpdateDateTime3
	s.fieldMap["Update_User3"] = s.UpdateUser3
	s.fieldMap["Version4"] = s.Version4
	s.fieldMap["Deleted3"] = s.Deleted3
	s.fieldMap["Compay_Id3"] = s.CompayId3
}

func (s sysResource) clone(db *gorm.DB) sysResource {
	s.sysResourceDo.ReplaceDB(db)
	return s
}

type sysResourceDo struct{ gen.DO }

func (s sysResourceDo) Debug() *sysResourceDo {
	return s.withDO(s.DO.Debug())
}

func (s sysResourceDo) WithContext(ctx context.Context) *sysResourceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysResourceDo) ReadDB() *sysResourceDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysResourceDo) WriteDB() *sysResourceDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysResourceDo) Clauses(conds ...clause.Expression) *sysResourceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysResourceDo) Returning(value interface{}, columns ...string) *sysResourceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysResourceDo) Not(conds ...gen.Condition) *sysResourceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysResourceDo) Or(conds ...gen.Condition) *sysResourceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysResourceDo) Select(conds ...field.Expr) *sysResourceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysResourceDo) Where(conds ...gen.Condition) *sysResourceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysResourceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sysResourceDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysResourceDo) Order(conds ...field.Expr) *sysResourceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysResourceDo) Distinct(cols ...field.Expr) *sysResourceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysResourceDo) Omit(cols ...field.Expr) *sysResourceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysResourceDo) Join(table schema.Tabler, on ...field.Expr) *sysResourceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysResourceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysResourceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysResourceDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysResourceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysResourceDo) Group(cols ...field.Expr) *sysResourceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysResourceDo) Having(conds ...gen.Condition) *sysResourceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysResourceDo) Limit(limit int) *sysResourceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysResourceDo) Offset(offset int) *sysResourceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysResourceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysResourceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysResourceDo) Unscoped() *sysResourceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysResourceDo) Create(values ...*model.SysResource) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysResourceDo) CreateInBatches(values []*model.SysResource, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysResourceDo) Save(values ...*model.SysResource) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysResourceDo) First() (*model.SysResource, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysResource), nil
	}
}

func (s sysResourceDo) Take() (*model.SysResource, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysResource), nil
	}
}

func (s sysResourceDo) Last() (*model.SysResource, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysResource), nil
	}
}

func (s sysResourceDo) Find() ([]*model.SysResource, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysResource), err
}

func (s sysResourceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysResource, err error) {
	buf := make([]*model.SysResource, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysResourceDo) FindInBatches(result *[]*model.SysResource, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysResourceDo) Attrs(attrs ...field.AssignExpr) *sysResourceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysResourceDo) Assign(attrs ...field.AssignExpr) *sysResourceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysResourceDo) Joins(fields ...field.RelationField) *sysResourceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysResourceDo) Preload(fields ...field.RelationField) *sysResourceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysResourceDo) FirstOrInit() (*model.SysResource, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysResource), nil
	}
}

func (s sysResourceDo) FirstOrCreate() (*model.SysResource, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysResource), nil
	}
}

func (s sysResourceDo) FindByPage(offset int, limit int) (result []*model.SysResource, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysResourceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysResourceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysResourceDo) Delete(models ...*model.SysResource) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysResourceDo) withDO(do gen.Dao) *sysResourceDo {
	s.DO = *do.(*gen.DO)
	return s
}
