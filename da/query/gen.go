// Code generated by "zld-jy/da/field". DO NOT EDIT.
// Code generated by "zld-jy/da/field". DO NOT EDIT.
// Code generated by "zld-jy/da/field". DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		Company:                newCompany(db),
		Employee:               newEmployee(db),
		Organization:           newOrganization(db),
		SysOpenUser:            newSysOpenUser(db),
		SysPermission:          newSysPermission(db),
		SysPermissionGroup:     newSysPermissionGroup(db),
		SysPermissionItem:      newSysPermissionItem(db),
		SysReourceExt:          newSysReourceExt(db),
		SysResource:            newSysResource(db),
		SysRole:                newSysRole(db),
		SysRolePermissionGroup: newSysRolePermissionGroup(db),
		SysUser:                newSysUser(db),
		SysUserGroup:           newSysUserGroup(db),
		SysUserGroupRole:       newSysUserGroupRole(db),
		SysUserRole:            newSysUserRole(db),
	}
}

type Query struct {
	db *gorm.DB

	Company                company
	Employee               employee
	Organization           organization
	SysOpenUser            sysOpenUser
	SysPermission          sysPermission
	SysPermissionGroup     sysPermissionGroup
	SysPermissionItem      sysPermissionItem
	SysReourceExt          sysReourceExt
	SysResource            sysResource
	SysRole                sysRole
	SysRolePermissionGroup sysRolePermissionGroup
	SysUser                sysUser
	SysUserGroup           sysUserGroup
	SysUserGroupRole       sysUserGroupRole
	SysUserRole            sysUserRole
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		Company:                q.Company.clone(db),
		Employee:               q.Employee.clone(db),
		Organization:           q.Organization.clone(db),
		SysOpenUser:            q.SysOpenUser.clone(db),
		SysPermission:          q.SysPermission.clone(db),
		SysPermissionGroup:     q.SysPermissionGroup.clone(db),
		SysPermissionItem:      q.SysPermissionItem.clone(db),
		SysReourceExt:          q.SysReourceExt.clone(db),
		SysResource:            q.SysResource.clone(db),
		SysRole:                q.SysRole.clone(db),
		SysRolePermissionGroup: q.SysRolePermissionGroup.clone(db),
		SysUser:                q.SysUser.clone(db),
		SysUserGroup:           q.SysUserGroup.clone(db),
		SysUserGroupRole:       q.SysUserGroupRole.clone(db),
		SysUserRole:            q.SysUserRole.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.clone(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return q.clone(db)
}

type queryCtx struct {
	Company                *companyDo
	Employee               *employeeDo
	Organization           *organizationDo
	SysOpenUser            *sysOpenUserDo
	SysPermission          *sysPermissionDo
	SysPermissionGroup     *sysPermissionGroupDo
	SysPermissionItem      *sysPermissionItemDo
	SysReourceExt          *sysReourceExtDo
	SysResource            *sysResourceDo
	SysRole                *sysRoleDo
	SysRolePermissionGroup *sysRolePermissionGroupDo
	SysUser                *sysUserDo
	SysUserGroup           *sysUserGroupDo
	SysUserGroupRole       *sysUserGroupRoleDo
	SysUserRole            *sysUserRoleDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Company:                q.Company.WithContext(ctx),
		Employee:               q.Employee.WithContext(ctx),
		Organization:           q.Organization.WithContext(ctx),
		SysOpenUser:            q.SysOpenUser.WithContext(ctx),
		SysPermission:          q.SysPermission.WithContext(ctx),
		SysPermissionGroup:     q.SysPermissionGroup.WithContext(ctx),
		SysPermissionItem:      q.SysPermissionItem.WithContext(ctx),
		SysReourceExt:          q.SysReourceExt.WithContext(ctx),
		SysResource:            q.SysResource.WithContext(ctx),
		SysRole:                q.SysRole.WithContext(ctx),
		SysRolePermissionGroup: q.SysRolePermissionGroup.WithContext(ctx),
		SysUser:                q.SysUser.WithContext(ctx),
		SysUserGroup:           q.SysUserGroup.WithContext(ctx),
		SysUserGroupRole:       q.SysUserGroupRole.WithContext(ctx),
		SysUserRole:            q.SysUserRole.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
