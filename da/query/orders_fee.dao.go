// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zld-jy/da/model"
)

func newOrdersFee(db *gorm.DB) ordersFee {
	_ordersFee := ordersFee{}

	_ordersFee.ordersFeeDo.UseDB(db)
	_ordersFee.ordersFeeDo.UseModel(&model.OrdersFee{})

	tableName := _ordersFee.ordersFeeDo.TableName()
	_ordersFee.ALL = field.NewAsterisk(tableName)
	_ordersFee.ID = field.NewInt64(tableName, "Id")
	_ordersFee.OrdID = field.NewInt64(tableName, "Ord_id")
	_ordersFee.PickUpFee = field.NewFloat64(tableName, "pick_up_fee")
	_ordersFee.DeliveryFee = field.NewFloat64(tableName, "delivery_fee")
	_ordersFee.TransportFee = field.NewFloat64(tableName, "transport_fee")
	_ordersFee.UnloadingFee = field.NewFloat64(tableName, "unloading_fee")
	_ordersFee.QuoteFee = field.NewFloat64(tableName, "quote_fee")
	_ordersFee.PremiumFee = field.NewFloat64(tableName, "premium_fee")
	_ordersFee.NonTaxFee = field.NewFloat64(tableName, "non_tax_fee")
	_ordersFee.TaxRate = field.NewFloat64(tableName, "tax_rate")
	_ordersFee.BondedFeeTotal = field.NewFloat64(tableName, "bonded_fee_total")

	_ordersFee.fillFieldMap()

	return _ordersFee
}

type ordersFee struct {
	ordersFeeDo ordersFeeDo

	ALL            field.Asterisk
	ID             field.Int64   // 订单费用Id
	OrdID          field.Int64   // 订单Id
	PickUpFee      field.Float64 // 提货费
	DeliveryFee    field.Float64 // 送货费
	TransportFee   field.Float64 // 干线费
	UnloadingFee   field.Float64 // 卸载费
	QuoteFee       field.Float64 // 报价金额
	PremiumFee     field.Float64 // 保费
	NonTaxFee      field.Float64 // 不含税金额
	TaxRate        field.Float64 // 税率
	BondedFeeTotal field.Float64 // 保税合计

	fieldMap map[string]field.Expr
}

func (o ordersFee) Table(newTableName string) *ordersFee {
	o.ordersFeeDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o ordersFee) As(alias string) *ordersFee {
	o.ordersFeeDo.DO = *(o.ordersFeeDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *ordersFee) updateTableName(table string) *ordersFee {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "Id")
	o.OrdID = field.NewInt64(table, "Ord_id")
	o.PickUpFee = field.NewFloat64(table, "pick_up_fee")
	o.DeliveryFee = field.NewFloat64(table, "delivery_fee")
	o.TransportFee = field.NewFloat64(table, "transport_fee")
	o.UnloadingFee = field.NewFloat64(table, "unloading_fee")
	o.QuoteFee = field.NewFloat64(table, "quote_fee")
	o.PremiumFee = field.NewFloat64(table, "premium_fee")
	o.NonTaxFee = field.NewFloat64(table, "non_tax_fee")
	o.TaxRate = field.NewFloat64(table, "tax_rate")
	o.BondedFeeTotal = field.NewFloat64(table, "bonded_fee_total")

	o.fillFieldMap()

	return o
}

func (o *ordersFee) WithContext(ctx context.Context) *ordersFeeDo {
	return o.ordersFeeDo.WithContext(ctx)
}

func (o ordersFee) TableName() string { return o.ordersFeeDo.TableName() }

func (o ordersFee) Alias() string { return o.ordersFeeDo.Alias() }

func (o *ordersFee) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *ordersFee) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 11)
	o.fieldMap["Id"] = o.ID
	o.fieldMap["Ord_id"] = o.OrdID
	o.fieldMap["pick_up_fee"] = o.PickUpFee
	o.fieldMap["delivery_fee"] = o.DeliveryFee
	o.fieldMap["transport_fee"] = o.TransportFee
	o.fieldMap["unloading_fee"] = o.UnloadingFee
	o.fieldMap["quote_fee"] = o.QuoteFee
	o.fieldMap["premium_fee"] = o.PremiumFee
	o.fieldMap["non_tax_fee"] = o.NonTaxFee
	o.fieldMap["tax_rate"] = o.TaxRate
	o.fieldMap["bonded_fee_total"] = o.BondedFeeTotal
}

func (o ordersFee) clone(db *gorm.DB) ordersFee {
	o.ordersFeeDo.ReplaceDB(db)
	return o
}

type ordersFeeDo struct{ gen.DO }

func (o ordersFeeDo) Debug() *ordersFeeDo {
	return o.withDO(o.DO.Debug())
}

func (o ordersFeeDo) WithContext(ctx context.Context) *ordersFeeDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o ordersFeeDo) ReadDB() *ordersFeeDo {
	return o.Clauses(dbresolver.Read)
}

func (o ordersFeeDo) WriteDB() *ordersFeeDo {
	return o.Clauses(dbresolver.Write)
}

func (o ordersFeeDo) Clauses(conds ...clause.Expression) *ordersFeeDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o ordersFeeDo) Returning(value interface{}, columns ...string) *ordersFeeDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o ordersFeeDo) Not(conds ...gen.Condition) *ordersFeeDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o ordersFeeDo) Or(conds ...gen.Condition) *ordersFeeDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o ordersFeeDo) Select(conds ...field.Expr) *ordersFeeDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o ordersFeeDo) Where(conds ...gen.Condition) *ordersFeeDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o ordersFeeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *ordersFeeDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o ordersFeeDo) Order(conds ...field.Expr) *ordersFeeDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o ordersFeeDo) Distinct(cols ...field.Expr) *ordersFeeDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o ordersFeeDo) Omit(cols ...field.Expr) *ordersFeeDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o ordersFeeDo) Join(table schema.Tabler, on ...field.Expr) *ordersFeeDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o ordersFeeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ordersFeeDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o ordersFeeDo) RightJoin(table schema.Tabler, on ...field.Expr) *ordersFeeDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o ordersFeeDo) Group(cols ...field.Expr) *ordersFeeDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o ordersFeeDo) Having(conds ...gen.Condition) *ordersFeeDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o ordersFeeDo) Limit(limit int) *ordersFeeDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o ordersFeeDo) Offset(offset int) *ordersFeeDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o ordersFeeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ordersFeeDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o ordersFeeDo) Unscoped() *ordersFeeDo {
	return o.withDO(o.DO.Unscoped())
}

func (o ordersFeeDo) Create(values ...*model.OrdersFee) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o ordersFeeDo) CreateInBatches(values []*model.OrdersFee, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o ordersFeeDo) Save(values ...*model.OrdersFee) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o ordersFeeDo) First() (*model.OrdersFee, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersFee), nil
	}
}

func (o ordersFeeDo) Take() (*model.OrdersFee, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersFee), nil
	}
}

func (o ordersFeeDo) Last() (*model.OrdersFee, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersFee), nil
	}
}

func (o ordersFeeDo) Find() ([]*model.OrdersFee, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrdersFee), err
}

func (o ordersFeeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrdersFee, err error) {
	buf := make([]*model.OrdersFee, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o ordersFeeDo) FindInBatches(result *[]*model.OrdersFee, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o ordersFeeDo) Attrs(attrs ...field.AssignExpr) *ordersFeeDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o ordersFeeDo) Assign(attrs ...field.AssignExpr) *ordersFeeDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o ordersFeeDo) Joins(fields ...field.RelationField) *ordersFeeDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o ordersFeeDo) Preload(fields ...field.RelationField) *ordersFeeDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o ordersFeeDo) FirstOrInit() (*model.OrdersFee, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersFee), nil
	}
}

func (o ordersFeeDo) FirstOrCreate() (*model.OrdersFee, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersFee), nil
	}
}

func (o ordersFeeDo) FindByPage(offset int, limit int) (result []*model.OrdersFee, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o ordersFeeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o ordersFeeDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o ordersFeeDo) Delete(models ...*model.OrdersFee) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *ordersFeeDo) withDO(do gen.Dao) *ordersFeeDo {
	o.DO = *do.(*gen.DO)
	return o
}
