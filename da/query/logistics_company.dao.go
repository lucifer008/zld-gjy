// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zld-jy/da/model"
)

func newLogisticsCompany(db *gorm.DB) logisticsCompany {
	_logisticsCompany := logisticsCompany{}

	_logisticsCompany.logisticsCompanyDo.UseDB(db)
	_logisticsCompany.logisticsCompanyDo.UseModel(&model.LogisticsCompany{})

	tableName := _logisticsCompany.logisticsCompanyDo.TableName()
	_logisticsCompany.ALL = field.NewAsterisk(tableName)
	_logisticsCompany.ID = field.NewInt64(tableName, "Id")
	_logisticsCompany.CompanyName = field.NewString(tableName, "Company_Name")
	_logisticsCompany.Corporation = field.NewString(tableName, "Corporation")
	_logisticsCompany.Type = field.NewInt32(tableName, "Type")
	_logisticsCompany.Tel = field.NewString(tableName, "Tel")
	_logisticsCompany.BankNo = field.NewString(tableName, "Bank_no")
	_logisticsCompany.PlateTotalIncome = field.NewFloat64(tableName, "Plate_Total_Income")
	_logisticsCompany.AccountQuota = field.NewFloat64(tableName, "Account_Quota")
	_logisticsCompany.RegisterDate = field.NewTime(tableName, "Register_Date")
	_logisticsCompany.Sign = field.NewInt32(tableName, "Sign")

	_logisticsCompany.fillFieldMap()

	return _logisticsCompany
}

type logisticsCompany struct {
	logisticsCompanyDo logisticsCompanyDo

	ALL              field.Asterisk
	ID               field.Int64   // 物流公司Id
	CompanyName      field.String  // 公司名称/车企名称
	Corporation      field.String  // 法人姓名
	Type             field.Int32   // 类型(0:个人 1 :公司 2 车队)
	Tel              field.String  // 手机号
	BankNo           field.String  // 银行卡
	PlateTotalIncome field.Float64 // 平台总收益
	AccountQuota     field.Float64 // 账户限额
	RegisterDate     field.Time    // 注册时间
	Sign             field.Int32   // 是否签约(0:未签约 1 已签约)

	fieldMap map[string]field.Expr
}

func (l logisticsCompany) Table(newTableName string) *logisticsCompany {
	l.logisticsCompanyDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logisticsCompany) As(alias string) *logisticsCompany {
	l.logisticsCompanyDo.DO = *(l.logisticsCompanyDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logisticsCompany) updateTableName(table string) *logisticsCompany {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt64(table, "Id")
	l.CompanyName = field.NewString(table, "Company_Name")
	l.Corporation = field.NewString(table, "Corporation")
	l.Type = field.NewInt32(table, "Type")
	l.Tel = field.NewString(table, "Tel")
	l.BankNo = field.NewString(table, "Bank_no")
	l.PlateTotalIncome = field.NewFloat64(table, "Plate_Total_Income")
	l.AccountQuota = field.NewFloat64(table, "Account_Quota")
	l.RegisterDate = field.NewTime(table, "Register_Date")
	l.Sign = field.NewInt32(table, "Sign")

	l.fillFieldMap()

	return l
}

func (l *logisticsCompany) WithContext(ctx context.Context) *logisticsCompanyDo {
	return l.logisticsCompanyDo.WithContext(ctx)
}

func (l logisticsCompany) TableName() string { return l.logisticsCompanyDo.TableName() }

func (l logisticsCompany) Alias() string { return l.logisticsCompanyDo.Alias() }

func (l *logisticsCompany) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logisticsCompany) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 10)
	l.fieldMap["Id"] = l.ID
	l.fieldMap["Company_Name"] = l.CompanyName
	l.fieldMap["Corporation"] = l.Corporation
	l.fieldMap["Type"] = l.Type
	l.fieldMap["Tel"] = l.Tel
	l.fieldMap["Bank_no"] = l.BankNo
	l.fieldMap["Plate_Total_Income"] = l.PlateTotalIncome
	l.fieldMap["Account_Quota"] = l.AccountQuota
	l.fieldMap["Register_Date"] = l.RegisterDate
	l.fieldMap["Sign"] = l.Sign
}

func (l logisticsCompany) clone(db *gorm.DB) logisticsCompany {
	l.logisticsCompanyDo.ReplaceDB(db)
	return l
}

type logisticsCompanyDo struct{ gen.DO }

func (l logisticsCompanyDo) Debug() *logisticsCompanyDo {
	return l.withDO(l.DO.Debug())
}

func (l logisticsCompanyDo) WithContext(ctx context.Context) *logisticsCompanyDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logisticsCompanyDo) ReadDB() *logisticsCompanyDo {
	return l.Clauses(dbresolver.Read)
}

func (l logisticsCompanyDo) WriteDB() *logisticsCompanyDo {
	return l.Clauses(dbresolver.Write)
}

func (l logisticsCompanyDo) Clauses(conds ...clause.Expression) *logisticsCompanyDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logisticsCompanyDo) Returning(value interface{}, columns ...string) *logisticsCompanyDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logisticsCompanyDo) Not(conds ...gen.Condition) *logisticsCompanyDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logisticsCompanyDo) Or(conds ...gen.Condition) *logisticsCompanyDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logisticsCompanyDo) Select(conds ...field.Expr) *logisticsCompanyDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logisticsCompanyDo) Where(conds ...gen.Condition) *logisticsCompanyDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logisticsCompanyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *logisticsCompanyDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l logisticsCompanyDo) Order(conds ...field.Expr) *logisticsCompanyDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logisticsCompanyDo) Distinct(cols ...field.Expr) *logisticsCompanyDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logisticsCompanyDo) Omit(cols ...field.Expr) *logisticsCompanyDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logisticsCompanyDo) Join(table schema.Tabler, on ...field.Expr) *logisticsCompanyDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logisticsCompanyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *logisticsCompanyDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logisticsCompanyDo) RightJoin(table schema.Tabler, on ...field.Expr) *logisticsCompanyDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logisticsCompanyDo) Group(cols ...field.Expr) *logisticsCompanyDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logisticsCompanyDo) Having(conds ...gen.Condition) *logisticsCompanyDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logisticsCompanyDo) Limit(limit int) *logisticsCompanyDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logisticsCompanyDo) Offset(offset int) *logisticsCompanyDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logisticsCompanyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *logisticsCompanyDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logisticsCompanyDo) Unscoped() *logisticsCompanyDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logisticsCompanyDo) Create(values ...*model.LogisticsCompany) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logisticsCompanyDo) CreateInBatches(values []*model.LogisticsCompany, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logisticsCompanyDo) Save(values ...*model.LogisticsCompany) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logisticsCompanyDo) First() (*model.LogisticsCompany, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogisticsCompany), nil
	}
}

func (l logisticsCompanyDo) Take() (*model.LogisticsCompany, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogisticsCompany), nil
	}
}

func (l logisticsCompanyDo) Last() (*model.LogisticsCompany, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogisticsCompany), nil
	}
}

func (l logisticsCompanyDo) Find() ([]*model.LogisticsCompany, error) {
	result, err := l.DO.Find()
	return result.([]*model.LogisticsCompany), err
}

func (l logisticsCompanyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogisticsCompany, err error) {
	buf := make([]*model.LogisticsCompany, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logisticsCompanyDo) FindInBatches(result *[]*model.LogisticsCompany, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logisticsCompanyDo) Attrs(attrs ...field.AssignExpr) *logisticsCompanyDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logisticsCompanyDo) Assign(attrs ...field.AssignExpr) *logisticsCompanyDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logisticsCompanyDo) Joins(fields ...field.RelationField) *logisticsCompanyDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logisticsCompanyDo) Preload(fields ...field.RelationField) *logisticsCompanyDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logisticsCompanyDo) FirstOrInit() (*model.LogisticsCompany, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogisticsCompany), nil
	}
}

func (l logisticsCompanyDo) FirstOrCreate() (*model.LogisticsCompany, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogisticsCompany), nil
	}
}

func (l logisticsCompanyDo) FindByPage(offset int, limit int) (result []*model.LogisticsCompany, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logisticsCompanyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logisticsCompanyDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logisticsCompanyDo) Delete(models ...*model.LogisticsCompany) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logisticsCompanyDo) withDO(do gen.Dao) *logisticsCompanyDo {
	l.DO = *do.(*gen.DO)
	return l
}
