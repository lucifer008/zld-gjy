// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zld-jy/da/model"
)

func newBillsOrdersItem(db *gorm.DB) billsOrdersItem {
	_billsOrdersItem := billsOrdersItem{}

	_billsOrdersItem.billsOrdersItemDo.UseDB(db)
	_billsOrdersItem.billsOrdersItemDo.UseModel(&model.BillsOrdersItem{})

	tableName := _billsOrdersItem.billsOrdersItemDo.TableName()
	_billsOrdersItem.ALL = field.NewAsterisk(tableName)
	_billsOrdersItem.ID = field.NewInt64(tableName, "Id")
	_billsOrdersItem.OrdID = field.NewInt64(tableName, "Ord_id")
	_billsOrdersItem.BilID = field.NewInt64(tableName, "Bil_Id")

	_billsOrdersItem.fillFieldMap()

	return _billsOrdersItem
}

type billsOrdersItem struct {
	billsOrdersItemDo billsOrdersItemDo

	ALL   field.Asterisk
	ID    field.Int64 // 开票申请单明细Id
	OrdID field.Int64 // 订单Id
	BilID field.Int64 // 开票Id

	fieldMap map[string]field.Expr
}

func (b billsOrdersItem) Table(newTableName string) *billsOrdersItem {
	b.billsOrdersItemDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b billsOrdersItem) As(alias string) *billsOrdersItem {
	b.billsOrdersItemDo.DO = *(b.billsOrdersItemDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *billsOrdersItem) updateTableName(table string) *billsOrdersItem {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "Id")
	b.OrdID = field.NewInt64(table, "Ord_id")
	b.BilID = field.NewInt64(table, "Bil_Id")

	b.fillFieldMap()

	return b
}

func (b *billsOrdersItem) WithContext(ctx context.Context) *billsOrdersItemDo {
	return b.billsOrdersItemDo.WithContext(ctx)
}

func (b billsOrdersItem) TableName() string { return b.billsOrdersItemDo.TableName() }

func (b billsOrdersItem) Alias() string { return b.billsOrdersItemDo.Alias() }

func (b *billsOrdersItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *billsOrdersItem) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 3)
	b.fieldMap["Id"] = b.ID
	b.fieldMap["Ord_id"] = b.OrdID
	b.fieldMap["Bil_Id"] = b.BilID
}

func (b billsOrdersItem) clone(db *gorm.DB) billsOrdersItem {
	b.billsOrdersItemDo.ReplaceDB(db)
	return b
}

type billsOrdersItemDo struct{ gen.DO }

func (b billsOrdersItemDo) Debug() *billsOrdersItemDo {
	return b.withDO(b.DO.Debug())
}

func (b billsOrdersItemDo) WithContext(ctx context.Context) *billsOrdersItemDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b billsOrdersItemDo) ReadDB() *billsOrdersItemDo {
	return b.Clauses(dbresolver.Read)
}

func (b billsOrdersItemDo) WriteDB() *billsOrdersItemDo {
	return b.Clauses(dbresolver.Write)
}

func (b billsOrdersItemDo) Clauses(conds ...clause.Expression) *billsOrdersItemDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b billsOrdersItemDo) Returning(value interface{}, columns ...string) *billsOrdersItemDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b billsOrdersItemDo) Not(conds ...gen.Condition) *billsOrdersItemDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b billsOrdersItemDo) Or(conds ...gen.Condition) *billsOrdersItemDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b billsOrdersItemDo) Select(conds ...field.Expr) *billsOrdersItemDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b billsOrdersItemDo) Where(conds ...gen.Condition) *billsOrdersItemDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b billsOrdersItemDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *billsOrdersItemDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b billsOrdersItemDo) Order(conds ...field.Expr) *billsOrdersItemDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b billsOrdersItemDo) Distinct(cols ...field.Expr) *billsOrdersItemDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b billsOrdersItemDo) Omit(cols ...field.Expr) *billsOrdersItemDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b billsOrdersItemDo) Join(table schema.Tabler, on ...field.Expr) *billsOrdersItemDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b billsOrdersItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *billsOrdersItemDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b billsOrdersItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *billsOrdersItemDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b billsOrdersItemDo) Group(cols ...field.Expr) *billsOrdersItemDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b billsOrdersItemDo) Having(conds ...gen.Condition) *billsOrdersItemDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b billsOrdersItemDo) Limit(limit int) *billsOrdersItemDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b billsOrdersItemDo) Offset(offset int) *billsOrdersItemDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b billsOrdersItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *billsOrdersItemDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b billsOrdersItemDo) Unscoped() *billsOrdersItemDo {
	return b.withDO(b.DO.Unscoped())
}

func (b billsOrdersItemDo) Create(values ...*model.BillsOrdersItem) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b billsOrdersItemDo) CreateInBatches(values []*model.BillsOrdersItem, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b billsOrdersItemDo) Save(values ...*model.BillsOrdersItem) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b billsOrdersItemDo) First() (*model.BillsOrdersItem, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BillsOrdersItem), nil
	}
}

func (b billsOrdersItemDo) Take() (*model.BillsOrdersItem, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BillsOrdersItem), nil
	}
}

func (b billsOrdersItemDo) Last() (*model.BillsOrdersItem, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BillsOrdersItem), nil
	}
}

func (b billsOrdersItemDo) Find() ([]*model.BillsOrdersItem, error) {
	result, err := b.DO.Find()
	return result.([]*model.BillsOrdersItem), err
}

func (b billsOrdersItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BillsOrdersItem, err error) {
	buf := make([]*model.BillsOrdersItem, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b billsOrdersItemDo) FindInBatches(result *[]*model.BillsOrdersItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b billsOrdersItemDo) Attrs(attrs ...field.AssignExpr) *billsOrdersItemDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b billsOrdersItemDo) Assign(attrs ...field.AssignExpr) *billsOrdersItemDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b billsOrdersItemDo) Joins(fields ...field.RelationField) *billsOrdersItemDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b billsOrdersItemDo) Preload(fields ...field.RelationField) *billsOrdersItemDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b billsOrdersItemDo) FirstOrInit() (*model.BillsOrdersItem, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BillsOrdersItem), nil
	}
}

func (b billsOrdersItemDo) FirstOrCreate() (*model.BillsOrdersItem, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BillsOrdersItem), nil
	}
}

func (b billsOrdersItemDo) FindByPage(offset int, limit int) (result []*model.BillsOrdersItem, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b billsOrdersItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b billsOrdersItemDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b billsOrdersItemDo) Delete(models ...*model.BillsOrdersItem) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *billsOrdersItemDo) withDO(do gen.Dao) *billsOrdersItemDo {
	b.DO = *do.(*gen.DO)
	return b
}
