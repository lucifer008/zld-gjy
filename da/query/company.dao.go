// Code generated by "zld-jy/da/field". DO NOT EDIT.
// Code generated by "zld-jy/da/field". DO NOT EDIT.
// Code generated by "zld-jy/da/field". DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
	"zld-jy/da/model"
)

func newCompany(db *gorm.DB) company {
	_company := company{}

	_company.companyDo.UseDB(db)
	_company.companyDo.UseModel(&model.Company{})

	tableName := _company.companyDo.TableName()
	_company.ALL = field.NewAsterisk(tableName)
	_company.ID = field.NewInt64(tableName, "Id")
	_company.CompanyName = field.NewString(tableName, "Company_Name")
	_company.CompanyType = field.NewInt32(tableName, "Company_Type")
	_company.CompanyDesc = field.NewString(tableName, "Company_Desc")
	_company.RegisterDateTime = field.NewTime(tableName, "Register_Date_Time")
	_company.Status = field.NewInt32(tableName, "Status")
	_company.InsertDateTime = field.NewTime(tableName, "Insert_Date_Time")
	_company.InsertUser = field.NewInt64(tableName, "Insert_User")
	_company.UpdateDateTime = field.NewTime(tableName, "Update_Date_Time")
	_company.UpdateUser = field.NewInt64(tableName, "Update_User")
	_company.Version = field.NewInt32(tableName, "Version")
	_company.Deleted = field.NewString(tableName, "Deleted")

	_company.fillFieldMap()

	return _company
}

type company struct {
	companyDo companyDo

	ALL              field.Asterisk
	ID               field.Int64  // Id
	CompanyName      field.String // 公司名称
	CompanyType      field.Int32  // 公司类型(0:政府 1: 消防 3 :企业 )
	CompanyDesc      field.String // 描述
	RegisterDateTime field.Time   // 注册时间
	Status           field.Int32  // 状态(0: 正常 1:停用)
	InsertDateTime   field.Time   // 插入时间
	InsertUser       field.Int64  // 插入用户
	UpdateDateTime   field.Time   // 更新时间
	UpdateUser       field.Int64  // 更新用户
	Version          field.Int32  // 版本
	Deleted          field.String // 删除标志(0:正常 1 删除)

	fieldMap map[string]field.Expr
}

func (c company) Table(newTableName string) *company {
	c.companyDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c company) As(alias string) *company {
	c.companyDo.DO = *(c.companyDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *company) updateTableName(table string) *company {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "Id")
	c.CompanyName = field.NewString(table, "Company_Name")
	c.CompanyType = field.NewInt32(table, "Company_Type")
	c.CompanyDesc = field.NewString(table, "Company_Desc")
	c.RegisterDateTime = field.NewTime(table, "Register_Date_Time")
	c.Status = field.NewInt32(table, "Status")
	c.InsertDateTime = field.NewTime(table, "Insert_Date_Time")
	c.InsertUser = field.NewInt64(table, "Insert_User")
	c.UpdateDateTime = field.NewTime(table, "Update_Date_Time")
	c.UpdateUser = field.NewInt64(table, "Update_User")
	c.Version = field.NewInt32(table, "Version")
	c.Deleted = field.NewString(table, "Deleted")

	c.fillFieldMap()

	return c
}

func (c *company) WithContext(ctx context.Context) *companyDo { return c.companyDo.WithContext(ctx) }

func (c company) TableName() string { return c.companyDo.TableName() }

func (c company) Alias() string { return c.companyDo.Alias() }

func (c *company) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *company) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["Id"] = c.ID
	c.fieldMap["Company_Name"] = c.CompanyName
	c.fieldMap["Company_Type"] = c.CompanyType
	c.fieldMap["Company_Desc"] = c.CompanyDesc
	c.fieldMap["Register_Date_Time"] = c.RegisterDateTime
	c.fieldMap["Status"] = c.Status
	c.fieldMap["Insert_Date_Time"] = c.InsertDateTime
	c.fieldMap["Insert_User"] = c.InsertUser
	c.fieldMap["Update_Date_Time"] = c.UpdateDateTime
	c.fieldMap["Update_User"] = c.UpdateUser
	c.fieldMap["Version"] = c.Version
	c.fieldMap["Deleted"] = c.Deleted
}

func (c company) clone(db *gorm.DB) company {
	c.companyDo.ReplaceDB(db)
	return c
}

type companyDo struct{ gen.DO }

func (c companyDo) Debug() *companyDo {
	return c.withDO(c.DO.Debug())
}

func (c companyDo) WithContext(ctx context.Context) *companyDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c companyDo) ReadDB() *companyDo {
	return c.Clauses(dbresolver.Read)
}

func (c companyDo) WriteDB() *companyDo {
	return c.Clauses(dbresolver.Write)
}

func (c companyDo) Clauses(conds ...clause.Expression) *companyDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c companyDo) Returning(value interface{}, columns ...string) *companyDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c companyDo) Not(conds ...gen.Condition) *companyDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c companyDo) Or(conds ...gen.Condition) *companyDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c companyDo) Select(conds ...field.Expr) *companyDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c companyDo) Where(conds ...gen.Condition) *companyDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c companyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *companyDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c companyDo) Order(conds ...field.Expr) *companyDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c companyDo) Distinct(cols ...field.Expr) *companyDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c companyDo) Omit(cols ...field.Expr) *companyDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c companyDo) Join(table schema.Tabler, on ...field.Expr) *companyDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c companyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *companyDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c companyDo) RightJoin(table schema.Tabler, on ...field.Expr) *companyDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c companyDo) Group(cols ...field.Expr) *companyDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c companyDo) Having(conds ...gen.Condition) *companyDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c companyDo) Limit(limit int) *companyDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c companyDo) Offset(offset int) *companyDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c companyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *companyDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c companyDo) Unscoped() *companyDo {
	return c.withDO(c.DO.Unscoped())
}

func (c companyDo) Create(values ...*model.Company) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c companyDo) CreateInBatches(values []*model.Company, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c companyDo) Save(values ...*model.Company) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c companyDo) First() (*model.Company, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Company), nil
	}
}

func (c companyDo) Take() (*model.Company, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Company), nil
	}
}

func (c companyDo) Last() (*model.Company, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Company), nil
	}
}

func (c companyDo) Find() ([]*model.Company, error) {
	result, err := c.DO.Find()
	return result.([]*model.Company), err
}

func (c companyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Company, err error) {
	buf := make([]*model.Company, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c companyDo) FindInBatches(result *[]*model.Company, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c companyDo) Attrs(attrs ...field.AssignExpr) *companyDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c companyDo) Assign(attrs ...field.AssignExpr) *companyDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c companyDo) Joins(fields ...field.RelationField) *companyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c companyDo) Preload(fields ...field.RelationField) *companyDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c companyDo) FirstOrInit() (*model.Company, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Company), nil
	}
}

func (c companyDo) FirstOrCreate() (*model.Company, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Company), nil
	}
}

func (c companyDo) FindByPage(offset int, limit int) (result []*model.Company, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c companyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c companyDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c companyDo) Delete(models ...*model.Company) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *companyDo) withDO(do gen.Dao) *companyDo {
	c.DO = *do.(*gen.DO)
	return c
}
