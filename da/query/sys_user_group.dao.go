// Code generated by "zld-jy/da/field". DO NOT EDIT.
// Code generated by "zld-jy/da/field". DO NOT EDIT.
// Code generated by "zld-jy/da/field". DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
	"gorm.io/plugin/dbresolver"

	"zld-jy/da/model"
)

func newSysUserGroup(db *gorm.DB) sysUserGroup {
	_sysUserGroup := sysUserGroup{}

	_sysUserGroup.sysUserGroupDo.UseDB(db)
	_sysUserGroup.sysUserGroupDo.UseModel(&model.SysUserGroup{})

	tableName := _sysUserGroup.sysUserGroupDo.TableName()
	_sysUserGroup.ALL = field.NewAsterisk(tableName)
	_sysUserGroup.Id8 = field.NewInt64(tableName, "Id8")
	_sysUserGroup.SysId8 = field.NewInt64(tableName, "Sys_Id8")
	_sysUserGroup.Id2 = field.NewInt64(tableName, "Id2")
	_sysUserGroup.UserGroupType = field.NewInt32(tableName, "User_Group_Type")
	_sysUserGroup.UserGroupDesc = field.NewString(tableName, "User_Group_Desc")
	_sysUserGroup.InsertDateTime2 = field.NewTime(tableName, "Insert_Date_Time2")
	_sysUserGroup.InsertUser4 = field.NewInt64(tableName, "Insert_User4")
	_sysUserGroup.UpdateDateTime2 = field.NewTime(tableName, "Update_Date_Time2")
	_sysUserGroup.UpdateUser4 = field.NewInt64(tableName, "Update_User4")
	_sysUserGroup.Version2 = field.NewInt32(tableName, "Version2")
	_sysUserGroup.Deleted4 = field.NewString(tableName, "Deleted4")
	_sysUserGroup.CompayId2 = field.NewInt64(tableName, "Compay_Id2")

	_sysUserGroup.fillFieldMap()

	return _sysUserGroup
}

type sysUserGroup struct {
	sysUserGroupDo sysUserGroupDo

	ALL             field.Asterisk
	Id8             field.Int64  // Id
	SysId8          field.Int64  // Id
	Id2             field.Int64  // Id
	UserGroupType   field.Int32  // 用户组类型
	UserGroupDesc   field.String // 用户组描述
	InsertDateTime2 field.Time   // 插入时间
	InsertUser4     field.Int64  // 插入用户
	UpdateDateTime2 field.Time   // 更新时间
	UpdateUser4     field.Int64  // 更新用户
	Version2        field.Int32  // 版本
	Deleted4        field.String // 删除标志(0:正常 1 删除)
	CompayId2       field.Int64  // 公司

	fieldMap map[string]field.Expr
}

func (s sysUserGroup) Table(newTableName string) *sysUserGroup {
	s.sysUserGroupDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysUserGroup) As(alias string) *sysUserGroup {
	s.sysUserGroupDo.DO = *(s.sysUserGroupDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysUserGroup) updateTableName(table string) *sysUserGroup {
	s.ALL = field.NewAsterisk(table)
	s.Id8 = field.NewInt64(table, "Id8")
	s.SysId8 = field.NewInt64(table, "Sys_Id8")
	s.Id2 = field.NewInt64(table, "Id2")
	s.UserGroupType = field.NewInt32(table, "User_Group_Type")
	s.UserGroupDesc = field.NewString(table, "User_Group_Desc")
	s.InsertDateTime2 = field.NewTime(table, "Insert_Date_Time2")
	s.InsertUser4 = field.NewInt64(table, "Insert_User4")
	s.UpdateDateTime2 = field.NewTime(table, "Update_Date_Time2")
	s.UpdateUser4 = field.NewInt64(table, "Update_User4")
	s.Version2 = field.NewInt32(table, "Version2")
	s.Deleted4 = field.NewString(table, "Deleted4")
	s.CompayId2 = field.NewInt64(table, "Compay_Id2")

	s.fillFieldMap()

	return s
}

func (s *sysUserGroup) WithContext(ctx context.Context) *sysUserGroupDo {
	return s.sysUserGroupDo.WithContext(ctx)
}

func (s sysUserGroup) TableName() string { return s.sysUserGroupDo.TableName() }

func (s sysUserGroup) Alias() string { return s.sysUserGroupDo.Alias() }

func (s *sysUserGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysUserGroup) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["Id8"] = s.Id8
	s.fieldMap["Sys_Id8"] = s.SysId8
	s.fieldMap["Id2"] = s.Id2
	s.fieldMap["User_Group_Type"] = s.UserGroupType
	s.fieldMap["User_Group_Desc"] = s.UserGroupDesc
	s.fieldMap["Insert_Date_Time2"] = s.InsertDateTime2
	s.fieldMap["Insert_User4"] = s.InsertUser4
	s.fieldMap["Update_Date_Time2"] = s.UpdateDateTime2
	s.fieldMap["Update_User4"] = s.UpdateUser4
	s.fieldMap["Version2"] = s.Version2
	s.fieldMap["Deleted4"] = s.Deleted4
	s.fieldMap["Compay_Id2"] = s.CompayId2
}

func (s sysUserGroup) clone(db *gorm.DB) sysUserGroup {
	s.sysUserGroupDo.ReplaceDB(db)
	return s
}

type sysUserGroupDo struct{ gen.DO }

func (s sysUserGroupDo) Debug() *sysUserGroupDo {
	return s.withDO(s.DO.Debug())
}

func (s sysUserGroupDo) WithContext(ctx context.Context) *sysUserGroupDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysUserGroupDo) ReadDB() *sysUserGroupDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysUserGroupDo) WriteDB() *sysUserGroupDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysUserGroupDo) Clauses(conds ...clause.Expression) *sysUserGroupDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysUserGroupDo) Returning(value interface{}, columns ...string) *sysUserGroupDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysUserGroupDo) Not(conds ...gen.Condition) *sysUserGroupDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysUserGroupDo) Or(conds ...gen.Condition) *sysUserGroupDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysUserGroupDo) Select(conds ...field.Expr) *sysUserGroupDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysUserGroupDo) Where(conds ...gen.Condition) *sysUserGroupDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysUserGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sysUserGroupDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysUserGroupDo) Order(conds ...field.Expr) *sysUserGroupDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysUserGroupDo) Distinct(cols ...field.Expr) *sysUserGroupDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysUserGroupDo) Omit(cols ...field.Expr) *sysUserGroupDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysUserGroupDo) Join(table schema.Tabler, on ...field.Expr) *sysUserGroupDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysUserGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysUserGroupDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysUserGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysUserGroupDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysUserGroupDo) Group(cols ...field.Expr) *sysUserGroupDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysUserGroupDo) Having(conds ...gen.Condition) *sysUserGroupDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysUserGroupDo) Limit(limit int) *sysUserGroupDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysUserGroupDo) Offset(offset int) *sysUserGroupDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysUserGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysUserGroupDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysUserGroupDo) Unscoped() *sysUserGroupDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysUserGroupDo) Create(values ...*model.SysUserGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysUserGroupDo) CreateInBatches(values []*model.SysUserGroup, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysUserGroupDo) Save(values ...*model.SysUserGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysUserGroupDo) First() (*model.SysUserGroup, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserGroup), nil
	}
}

func (s sysUserGroupDo) Take() (*model.SysUserGroup, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserGroup), nil
	}
}

func (s sysUserGroupDo) Last() (*model.SysUserGroup, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserGroup), nil
	}
}

func (s sysUserGroupDo) Find() ([]*model.SysUserGroup, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysUserGroup), err
}

func (s sysUserGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysUserGroup, err error) {
	buf := make([]*model.SysUserGroup, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysUserGroupDo) FindInBatches(result *[]*model.SysUserGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysUserGroupDo) Attrs(attrs ...field.AssignExpr) *sysUserGroupDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysUserGroupDo) Assign(attrs ...field.AssignExpr) *sysUserGroupDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysUserGroupDo) Joins(fields ...field.RelationField) *sysUserGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysUserGroupDo) Preload(fields ...field.RelationField) *sysUserGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysUserGroupDo) FirstOrInit() (*model.SysUserGroup, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserGroup), nil
	}
}

func (s sysUserGroupDo) FirstOrCreate() (*model.SysUserGroup, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysUserGroup), nil
	}
}

func (s sysUserGroupDo) FindByPage(offset int, limit int) (result []*model.SysUserGroup, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysUserGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysUserGroupDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysUserGroupDo) Delete(models ...*model.SysUserGroup) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysUserGroupDo) withDO(do gen.Dao) *sysUserGroupDo {
	s.DO = *do.(*gen.DO)
	return s
}
