// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zld-jy/da/domain"
)

func newSysUserGroupRole(db *gorm.DB) sysUserGroupRole {
	_sysUserGroupRole := sysUserGroupRole{}

	_sysUserGroupRole.sysUserGroupRoleDo.UseDB(db)
	_sysUserGroupRole.sysUserGroupRoleDo.UseModel(&domain.SysUserGroupRole{})

	tableName := _sysUserGroupRole.sysUserGroupRoleDo.TableName()
	_sysUserGroupRole.ALL = field.NewAsterisk(tableName)
	_sysUserGroupRole.ID = field.NewInt64(tableName, "Id")
	_sysUserGroupRole.SysID = field.NewInt64(tableName, "Sys_Id")
	_sysUserGroupRole.SysId2 = field.NewInt64(tableName, "Sys_Id2")

	_sysUserGroupRole.fillFieldMap()

	return _sysUserGroupRole
}

type sysUserGroupRole struct {
	sysUserGroupRoleDo sysUserGroupRoleDo

	ALL    field.Asterisk
	ID     field.Int64
	SysID  field.Int64 // 角色Id
	SysId2 field.Int64 // Id

	fieldMap map[string]field.Expr
}

func (s sysUserGroupRole) Table(newTableName string) *sysUserGroupRole {
	s.sysUserGroupRoleDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysUserGroupRole) As(alias string) *sysUserGroupRole {
	s.sysUserGroupRoleDo.DO = *(s.sysUserGroupRoleDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysUserGroupRole) updateTableName(table string) *sysUserGroupRole {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "Id")
	s.SysID = field.NewInt64(table, "Sys_Id")
	s.SysId2 = field.NewInt64(table, "Sys_Id2")

	s.fillFieldMap()

	return s
}

func (s *sysUserGroupRole) WithContext(ctx context.Context) *sysUserGroupRoleDo {
	return s.sysUserGroupRoleDo.WithContext(ctx)
}

func (s sysUserGroupRole) TableName() string { return s.sysUserGroupRoleDo.TableName() }

func (s sysUserGroupRole) Alias() string { return s.sysUserGroupRoleDo.Alias() }

func (s *sysUserGroupRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysUserGroupRole) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["Id"] = s.ID
	s.fieldMap["Sys_Id"] = s.SysID
	s.fieldMap["Sys_Id2"] = s.SysId2
}

func (s sysUserGroupRole) clone(db *gorm.DB) sysUserGroupRole {
	s.sysUserGroupRoleDo.ReplaceDB(db)
	return s
}

type sysUserGroupRoleDo struct{ gen.DO }

func (s sysUserGroupRoleDo) Debug() *sysUserGroupRoleDo {
	return s.withDO(s.DO.Debug())
}

func (s sysUserGroupRoleDo) WithContext(ctx context.Context) *sysUserGroupRoleDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysUserGroupRoleDo) ReadDB() *sysUserGroupRoleDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysUserGroupRoleDo) WriteDB() *sysUserGroupRoleDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysUserGroupRoleDo) Clauses(conds ...clause.Expression) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysUserGroupRoleDo) Returning(value interface{}, columns ...string) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysUserGroupRoleDo) Not(conds ...gen.Condition) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysUserGroupRoleDo) Or(conds ...gen.Condition) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysUserGroupRoleDo) Select(conds ...field.Expr) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysUserGroupRoleDo) Where(conds ...gen.Condition) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysUserGroupRoleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sysUserGroupRoleDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysUserGroupRoleDo) Order(conds ...field.Expr) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysUserGroupRoleDo) Distinct(cols ...field.Expr) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysUserGroupRoleDo) Omit(cols ...field.Expr) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysUserGroupRoleDo) Join(table schema.Tabler, on ...field.Expr) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysUserGroupRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysUserGroupRoleDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysUserGroupRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysUserGroupRoleDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysUserGroupRoleDo) Group(cols ...field.Expr) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysUserGroupRoleDo) Having(conds ...gen.Condition) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysUserGroupRoleDo) Limit(limit int) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysUserGroupRoleDo) Offset(offset int) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysUserGroupRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysUserGroupRoleDo) Unscoped() *sysUserGroupRoleDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysUserGroupRoleDo) Create(values ...*domain.SysUserGroupRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysUserGroupRoleDo) CreateInBatches(values []*domain.SysUserGroupRole, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysUserGroupRoleDo) Save(values ...*domain.SysUserGroupRole) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysUserGroupRoleDo) First() (*domain.SysUserGroupRole, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.SysUserGroupRole), nil
	}
}

func (s sysUserGroupRoleDo) Take() (*domain.SysUserGroupRole, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.SysUserGroupRole), nil
	}
}

func (s sysUserGroupRoleDo) Last() (*domain.SysUserGroupRole, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.SysUserGroupRole), nil
	}
}

func (s sysUserGroupRoleDo) Find() ([]*domain.SysUserGroupRole, error) {
	result, err := s.DO.Find()
	return result.([]*domain.SysUserGroupRole), err
}

func (s sysUserGroupRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.SysUserGroupRole, err error) {
	buf := make([]*domain.SysUserGroupRole, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysUserGroupRoleDo) FindInBatches(result *[]*domain.SysUserGroupRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysUserGroupRoleDo) Attrs(attrs ...field.AssignExpr) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysUserGroupRoleDo) Assign(attrs ...field.AssignExpr) *sysUserGroupRoleDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysUserGroupRoleDo) Joins(fields ...field.RelationField) *sysUserGroupRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysUserGroupRoleDo) Preload(fields ...field.RelationField) *sysUserGroupRoleDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysUserGroupRoleDo) FirstOrInit() (*domain.SysUserGroupRole, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.SysUserGroupRole), nil
	}
}

func (s sysUserGroupRoleDo) FirstOrCreate() (*domain.SysUserGroupRole, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.SysUserGroupRole), nil
	}
}

func (s sysUserGroupRoleDo) FindByPage(offset int, limit int) (result []*domain.SysUserGroupRole, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysUserGroupRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysUserGroupRoleDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysUserGroupRoleDo) Delete(models ...*domain.SysUserGroupRole) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysUserGroupRoleDo) withDO(do gen.Dao) *sysUserGroupRoleDo {
	s.DO = *do.(*gen.DO)
	return s
}
