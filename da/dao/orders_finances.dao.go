// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zld-jy/da/model"
)

func newOrdersFinance(db *gorm.DB) ordersFinance {
	_ordersFinance := ordersFinance{}

	_ordersFinance.ordersFinanceDo.UseDB(db)
	_ordersFinance.ordersFinanceDo.UseModel(&model.OrdersFinance{})

	tableName := _ordersFinance.ordersFinanceDo.TableName()
	_ordersFinance.ALL = field.NewAsterisk(tableName)
	_ordersFinance.ID = field.NewInt64(tableName, "Id")
	_ordersFinance.OrdID = field.NewInt64(tableName, "Ord_id")
	_ordersFinance.Type = field.NewInt32(tableName, "type")
	_ordersFinance.NonTaxAmount = field.NewFloat64(tableName, "non_tax_amount")
	_ordersFinance.TaxRate = field.NewFloat64(tableName, "tax_rate")
	_ordersFinance.Total = field.NewFloat64(tableName, "total")
	_ordersFinance.BillTag = field.NewInt32(tableName, "bill_tag")
	_ordersFinance.OperateDate = field.NewTime(tableName, "operate_date")
	_ordersFinance.OperateWay = field.NewInt32(tableName, "operate_way")

	_ordersFinance.fillFieldMap()

	return _ordersFinance
}

type ordersFinance struct {
	ordersFinanceDo ordersFinanceDo

	ALL          field.Asterisk
	ID           field.Int64   // 结算Id
	OrdID        field.Int64   // 订单Id
	Type         field.Int32   // 结算类型(0 收款 1 付款)
	NonTaxAmount field.Float64 // 不含税金额
	TaxRate      field.Float64 // 税率
	Total        field.Float64 // 价税合计
	BillTag      field.Int32   // 是否开票
	OperateDate  field.Time    // 收款/付款时间
	OperateWay   field.Int32   // 收款/付款方式(0 线下 2 银行卡 3 微信支付 4 支付宝)

	fieldMap map[string]field.Expr
}

func (o ordersFinance) Table(newTableName string) *ordersFinance {
	o.ordersFinanceDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o ordersFinance) As(alias string) *ordersFinance {
	o.ordersFinanceDo.DO = *(o.ordersFinanceDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *ordersFinance) updateTableName(table string) *ordersFinance {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "Id")
	o.OrdID = field.NewInt64(table, "Ord_id")
	o.Type = field.NewInt32(table, "type")
	o.NonTaxAmount = field.NewFloat64(table, "non_tax_amount")
	o.TaxRate = field.NewFloat64(table, "tax_rate")
	o.Total = field.NewFloat64(table, "total")
	o.BillTag = field.NewInt32(table, "bill_tag")
	o.OperateDate = field.NewTime(table, "operate_date")
	o.OperateWay = field.NewInt32(table, "operate_way")

	o.fillFieldMap()

	return o
}

func (o *ordersFinance) WithContext(ctx context.Context) *ordersFinanceDo {
	return o.ordersFinanceDo.WithContext(ctx)
}

func (o ordersFinance) TableName() string { return o.ordersFinanceDo.TableName() }

func (o ordersFinance) Alias() string { return o.ordersFinanceDo.Alias() }

func (o *ordersFinance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *ordersFinance) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["Id"] = o.ID
	o.fieldMap["Ord_id"] = o.OrdID
	o.fieldMap["type"] = o.Type
	o.fieldMap["non_tax_amount"] = o.NonTaxAmount
	o.fieldMap["tax_rate"] = o.TaxRate
	o.fieldMap["total"] = o.Total
	o.fieldMap["bill_tag"] = o.BillTag
	o.fieldMap["operate_date"] = o.OperateDate
	o.fieldMap["operate_way"] = o.OperateWay
}

func (o ordersFinance) clone(db *gorm.DB) ordersFinance {
	o.ordersFinanceDo.ReplaceDB(db)
	return o
}

type ordersFinanceDo struct{ gen.DO }

func (o ordersFinanceDo) Debug() *ordersFinanceDo {
	return o.withDO(o.DO.Debug())
}

func (o ordersFinanceDo) WithContext(ctx context.Context) *ordersFinanceDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o ordersFinanceDo) ReadDB() *ordersFinanceDo {
	return o.Clauses(dbresolver.Read)
}

func (o ordersFinanceDo) WriteDB() *ordersFinanceDo {
	return o.Clauses(dbresolver.Write)
}

func (o ordersFinanceDo) Clauses(conds ...clause.Expression) *ordersFinanceDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o ordersFinanceDo) Returning(value interface{}, columns ...string) *ordersFinanceDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o ordersFinanceDo) Not(conds ...gen.Condition) *ordersFinanceDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o ordersFinanceDo) Or(conds ...gen.Condition) *ordersFinanceDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o ordersFinanceDo) Select(conds ...field.Expr) *ordersFinanceDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o ordersFinanceDo) Where(conds ...gen.Condition) *ordersFinanceDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o ordersFinanceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *ordersFinanceDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o ordersFinanceDo) Order(conds ...field.Expr) *ordersFinanceDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o ordersFinanceDo) Distinct(cols ...field.Expr) *ordersFinanceDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o ordersFinanceDo) Omit(cols ...field.Expr) *ordersFinanceDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o ordersFinanceDo) Join(table schema.Tabler, on ...field.Expr) *ordersFinanceDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o ordersFinanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ordersFinanceDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o ordersFinanceDo) RightJoin(table schema.Tabler, on ...field.Expr) *ordersFinanceDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o ordersFinanceDo) Group(cols ...field.Expr) *ordersFinanceDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o ordersFinanceDo) Having(conds ...gen.Condition) *ordersFinanceDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o ordersFinanceDo) Limit(limit int) *ordersFinanceDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o ordersFinanceDo) Offset(offset int) *ordersFinanceDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o ordersFinanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ordersFinanceDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o ordersFinanceDo) Unscoped() *ordersFinanceDo {
	return o.withDO(o.DO.Unscoped())
}

func (o ordersFinanceDo) Create(values ...*model.OrdersFinance) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o ordersFinanceDo) CreateInBatches(values []*model.OrdersFinance, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o ordersFinanceDo) Save(values ...*model.OrdersFinance) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o ordersFinanceDo) First() (*model.OrdersFinance, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersFinance), nil
	}
}

func (o ordersFinanceDo) Take() (*model.OrdersFinance, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersFinance), nil
	}
}

func (o ordersFinanceDo) Last() (*model.OrdersFinance, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersFinance), nil
	}
}

func (o ordersFinanceDo) Find() ([]*model.OrdersFinance, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrdersFinance), err
}

func (o ordersFinanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrdersFinance, err error) {
	buf := make([]*model.OrdersFinance, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o ordersFinanceDo) FindInBatches(result *[]*model.OrdersFinance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o ordersFinanceDo) Attrs(attrs ...field.AssignExpr) *ordersFinanceDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o ordersFinanceDo) Assign(attrs ...field.AssignExpr) *ordersFinanceDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o ordersFinanceDo) Joins(fields ...field.RelationField) *ordersFinanceDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o ordersFinanceDo) Preload(fields ...field.RelationField) *ordersFinanceDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o ordersFinanceDo) FirstOrInit() (*model.OrdersFinance, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersFinance), nil
	}
}

func (o ordersFinanceDo) FirstOrCreate() (*model.OrdersFinance, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersFinance), nil
	}
}

func (o ordersFinanceDo) FindByPage(offset int, limit int) (result []*model.OrdersFinance, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o ordersFinanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o ordersFinanceDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o ordersFinanceDo) Delete(models ...*model.OrdersFinance) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *ordersFinanceDo) withDO(do gen.Dao) *ordersFinanceDo {
	o.DO = *do.(*gen.DO)
	return o
}
