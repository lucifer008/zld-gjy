// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zld-jy/da/model"
)

func newOrdersGood(db *gorm.DB) ordersGood {
	_ordersGood := ordersGood{}

	_ordersGood.ordersGoodDo.UseDB(db)
	_ordersGood.ordersGoodDo.UseModel(&model.OrdersGood{})

	tableName := _ordersGood.ordersGoodDo.TableName()
	_ordersGood.ALL = field.NewAsterisk(tableName)
	_ordersGood.ID = field.NewInt64(tableName, "Id")
	_ordersGood.OrdID = field.NewInt64(tableName, "Ord_id")
	_ordersGood.GoodsName = field.NewString(tableName, "goods_name")
	_ordersGood.Weight = field.NewString(tableName, "weight")
	_ordersGood.Volume = field.NewString(tableName, "volume")
	_ordersGood.Size = field.NewString(tableName, "size")

	_ordersGood.fillFieldMap()

	return _ordersGood
}

type ordersGood struct {
	ordersGoodDo ordersGoodDo

	ALL       field.Asterisk
	ID        field.Int64  // 货物Id
	OrdID     field.Int64  // 订单Id
	GoodsName field.String // 货物名称
	Weight    field.String // 重量
	Volume    field.String // 体积
	Size      field.String // 尺寸

	fieldMap map[string]field.Expr
}

func (o ordersGood) Table(newTableName string) *ordersGood {
	o.ordersGoodDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o ordersGood) As(alias string) *ordersGood {
	o.ordersGoodDo.DO = *(o.ordersGoodDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *ordersGood) updateTableName(table string) *ordersGood {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "Id")
	o.OrdID = field.NewInt64(table, "Ord_id")
	o.GoodsName = field.NewString(table, "goods_name")
	o.Weight = field.NewString(table, "weight")
	o.Volume = field.NewString(table, "volume")
	o.Size = field.NewString(table, "size")

	o.fillFieldMap()

	return o
}

func (o *ordersGood) WithContext(ctx context.Context) *ordersGoodDo {
	return o.ordersGoodDo.WithContext(ctx)
}

func (o ordersGood) TableName() string { return o.ordersGoodDo.TableName() }

func (o ordersGood) Alias() string { return o.ordersGoodDo.Alias() }

func (o *ordersGood) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *ordersGood) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 6)
	o.fieldMap["Id"] = o.ID
	o.fieldMap["Ord_id"] = o.OrdID
	o.fieldMap["goods_name"] = o.GoodsName
	o.fieldMap["weight"] = o.Weight
	o.fieldMap["volume"] = o.Volume
	o.fieldMap["size"] = o.Size
}

func (o ordersGood) clone(db *gorm.DB) ordersGood {
	o.ordersGoodDo.ReplaceDB(db)
	return o
}

type ordersGoodDo struct{ gen.DO }

func (o ordersGoodDo) Debug() *ordersGoodDo {
	return o.withDO(o.DO.Debug())
}

func (o ordersGoodDo) WithContext(ctx context.Context) *ordersGoodDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o ordersGoodDo) ReadDB() *ordersGoodDo {
	return o.Clauses(dbresolver.Read)
}

func (o ordersGoodDo) WriteDB() *ordersGoodDo {
	return o.Clauses(dbresolver.Write)
}

func (o ordersGoodDo) Clauses(conds ...clause.Expression) *ordersGoodDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o ordersGoodDo) Returning(value interface{}, columns ...string) *ordersGoodDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o ordersGoodDo) Not(conds ...gen.Condition) *ordersGoodDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o ordersGoodDo) Or(conds ...gen.Condition) *ordersGoodDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o ordersGoodDo) Select(conds ...field.Expr) *ordersGoodDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o ordersGoodDo) Where(conds ...gen.Condition) *ordersGoodDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o ordersGoodDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *ordersGoodDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o ordersGoodDo) Order(conds ...field.Expr) *ordersGoodDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o ordersGoodDo) Distinct(cols ...field.Expr) *ordersGoodDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o ordersGoodDo) Omit(cols ...field.Expr) *ordersGoodDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o ordersGoodDo) Join(table schema.Tabler, on ...field.Expr) *ordersGoodDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o ordersGoodDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ordersGoodDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o ordersGoodDo) RightJoin(table schema.Tabler, on ...field.Expr) *ordersGoodDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o ordersGoodDo) Group(cols ...field.Expr) *ordersGoodDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o ordersGoodDo) Having(conds ...gen.Condition) *ordersGoodDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o ordersGoodDo) Limit(limit int) *ordersGoodDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o ordersGoodDo) Offset(offset int) *ordersGoodDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o ordersGoodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ordersGoodDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o ordersGoodDo) Unscoped() *ordersGoodDo {
	return o.withDO(o.DO.Unscoped())
}

func (o ordersGoodDo) Create(values ...*model.OrdersGood) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o ordersGoodDo) CreateInBatches(values []*model.OrdersGood, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o ordersGoodDo) Save(values ...*model.OrdersGood) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o ordersGoodDo) First() (*model.OrdersGood, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersGood), nil
	}
}

func (o ordersGoodDo) Take() (*model.OrdersGood, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersGood), nil
	}
}

func (o ordersGoodDo) Last() (*model.OrdersGood, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersGood), nil
	}
}

func (o ordersGoodDo) Find() ([]*model.OrdersGood, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrdersGood), err
}

func (o ordersGoodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrdersGood, err error) {
	buf := make([]*model.OrdersGood, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o ordersGoodDo) FindInBatches(result *[]*model.OrdersGood, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o ordersGoodDo) Attrs(attrs ...field.AssignExpr) *ordersGoodDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o ordersGoodDo) Assign(attrs ...field.AssignExpr) *ordersGoodDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o ordersGoodDo) Joins(fields ...field.RelationField) *ordersGoodDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o ordersGoodDo) Preload(fields ...field.RelationField) *ordersGoodDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o ordersGoodDo) FirstOrInit() (*model.OrdersGood, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersGood), nil
	}
}

func (o ordersGoodDo) FirstOrCreate() (*model.OrdersGood, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrdersGood), nil
	}
}

func (o ordersGoodDo) FindByPage(offset int, limit int) (result []*model.OrdersGood, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o ordersGoodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o ordersGoodDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o ordersGoodDo) Delete(models ...*model.OrdersGood) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *ordersGoodDo) withDO(do gen.Dao) *ordersGoodDo {
	o.DO = *do.(*gen.DO)
	return o
}
