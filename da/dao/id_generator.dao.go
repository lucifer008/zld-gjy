// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zld-jy/da/domain"
)

func newIDGENERATOR(db *gorm.DB) iDGENERATOR {
	_iDGENERATOR := iDGENERATOR{}

	_iDGENERATOR.iDGENERATORDo.UseDB(db)
	_iDGENERATOR.iDGENERATORDo.UseModel(&domain.IDGENERATOR{})

	tableName := _iDGENERATOR.iDGENERATORDo.TableName()
	_iDGENERATOR.ALL = field.NewAsterisk(tableName)
	_iDGENERATOR.ID = field.NewInt64(tableName, "id")
	_iDGENERATOR.FlagNo = field.NewString(tableName, "flag_no")
	_iDGENERATOR.BeginValue = field.NewInt64(tableName, "begin_value")
	_iDGENERATOR.CurrentValue = field.NewInt64(tableName, "current_value")
	_iDGENERATOR.EndValue = field.NewInt64(tableName, "end_value")
	_iDGENERATOR.Memo = field.NewString(tableName, "memo")
	_iDGENERATOR.CompanyID = field.NewInt64(tableName, "company_id")

	_iDGENERATOR.fillFieldMap()

	return _iDGENERATOR
}

type iDGENERATOR struct {
	iDGENERATORDo iDGENERATORDo

	ALL          field.Asterisk
	ID           field.Int64  // id生成器id
	FlagNo       field.String // 标示符
	BeginValue   field.Int64  // 开始值
	CurrentValue field.Int64  // 目前值
	EndValue     field.Int64  // 结束值
	Memo         field.String // 备注
	CompanyID    field.Int64  // 分公司Id

	fieldMap map[string]field.Expr
}

func (i iDGENERATOR) Table(newTableName string) *iDGENERATOR {
	i.iDGENERATORDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i iDGENERATOR) As(alias string) *iDGENERATOR {
	i.iDGENERATORDo.DO = *(i.iDGENERATORDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *iDGENERATOR) updateTableName(table string) *iDGENERATOR {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.FlagNo = field.NewString(table, "flag_no")
	i.BeginValue = field.NewInt64(table, "begin_value")
	i.CurrentValue = field.NewInt64(table, "current_value")
	i.EndValue = field.NewInt64(table, "end_value")
	i.Memo = field.NewString(table, "memo")
	i.CompanyID = field.NewInt64(table, "company_id")

	i.fillFieldMap()

	return i
}

func (i *iDGENERATOR) WithContext(ctx context.Context) *iDGENERATORDo {
	return i.iDGENERATORDo.WithContext(ctx)
}

func (i iDGENERATOR) TableName() string { return i.iDGENERATORDo.TableName() }

func (i iDGENERATOR) Alias() string { return i.iDGENERATORDo.Alias() }

func (i *iDGENERATOR) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *iDGENERATOR) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 7)
	i.fieldMap["id"] = i.ID
	i.fieldMap["flag_no"] = i.FlagNo
	i.fieldMap["begin_value"] = i.BeginValue
	i.fieldMap["current_value"] = i.CurrentValue
	i.fieldMap["end_value"] = i.EndValue
	i.fieldMap["memo"] = i.Memo
	i.fieldMap["company_id"] = i.CompanyID
}

func (i iDGENERATOR) clone(db *gorm.DB) iDGENERATOR {
	i.iDGENERATORDo.ReplaceDB(db)
	return i
}

type iDGENERATORDo struct{ gen.DO }

func (i iDGENERATORDo) Debug() *iDGENERATORDo {
	return i.withDO(i.DO.Debug())
}

func (i iDGENERATORDo) WithContext(ctx context.Context) *iDGENERATORDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i iDGENERATORDo) ReadDB() *iDGENERATORDo {
	return i.Clauses(dbresolver.Read)
}

func (i iDGENERATORDo) WriteDB() *iDGENERATORDo {
	return i.Clauses(dbresolver.Write)
}

func (i iDGENERATORDo) Clauses(conds ...clause.Expression) *iDGENERATORDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i iDGENERATORDo) Returning(value interface{}, columns ...string) *iDGENERATORDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i iDGENERATORDo) Not(conds ...gen.Condition) *iDGENERATORDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i iDGENERATORDo) Or(conds ...gen.Condition) *iDGENERATORDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i iDGENERATORDo) Select(conds ...field.Expr) *iDGENERATORDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i iDGENERATORDo) Where(conds ...gen.Condition) *iDGENERATORDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i iDGENERATORDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *iDGENERATORDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i iDGENERATORDo) Order(conds ...field.Expr) *iDGENERATORDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i iDGENERATORDo) Distinct(cols ...field.Expr) *iDGENERATORDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i iDGENERATORDo) Omit(cols ...field.Expr) *iDGENERATORDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i iDGENERATORDo) Join(table schema.Tabler, on ...field.Expr) *iDGENERATORDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i iDGENERATORDo) LeftJoin(table schema.Tabler, on ...field.Expr) *iDGENERATORDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i iDGENERATORDo) RightJoin(table schema.Tabler, on ...field.Expr) *iDGENERATORDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i iDGENERATORDo) Group(cols ...field.Expr) *iDGENERATORDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i iDGENERATORDo) Having(conds ...gen.Condition) *iDGENERATORDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i iDGENERATORDo) Limit(limit int) *iDGENERATORDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i iDGENERATORDo) Offset(offset int) *iDGENERATORDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i iDGENERATORDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *iDGENERATORDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i iDGENERATORDo) Unscoped() *iDGENERATORDo {
	return i.withDO(i.DO.Unscoped())
}

func (i iDGENERATORDo) Create(values ...*domain.IDGENERATOR) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i iDGENERATORDo) CreateInBatches(values []*domain.IDGENERATOR, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i iDGENERATORDo) Save(values ...*domain.IDGENERATOR) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i iDGENERATORDo) First() (*domain.IDGENERATOR, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.IDGENERATOR), nil
	}
}

func (i iDGENERATORDo) Take() (*domain.IDGENERATOR, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.IDGENERATOR), nil
	}
}

func (i iDGENERATORDo) Last() (*domain.IDGENERATOR, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.IDGENERATOR), nil
	}
}

func (i iDGENERATORDo) Find() ([]*domain.IDGENERATOR, error) {
	result, err := i.DO.Find()
	return result.([]*domain.IDGENERATOR), err
}

func (i iDGENERATORDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.IDGENERATOR, err error) {
	buf := make([]*domain.IDGENERATOR, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i iDGENERATORDo) FindInBatches(result *[]*domain.IDGENERATOR, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i iDGENERATORDo) Attrs(attrs ...field.AssignExpr) *iDGENERATORDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i iDGENERATORDo) Assign(attrs ...field.AssignExpr) *iDGENERATORDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i iDGENERATORDo) Joins(fields ...field.RelationField) *iDGENERATORDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i iDGENERATORDo) Preload(fields ...field.RelationField) *iDGENERATORDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i iDGENERATORDo) FirstOrInit() (*domain.IDGENERATOR, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.IDGENERATOR), nil
	}
}

func (i iDGENERATORDo) FirstOrCreate() (*domain.IDGENERATOR, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.IDGENERATOR), nil
	}
}

func (i iDGENERATORDo) FindByPage(offset int, limit int) (result []*domain.IDGENERATOR, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i iDGENERATORDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i iDGENERATORDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i iDGENERATORDo) Delete(models ...*domain.IDGENERATOR) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *iDGENERATORDo) withDO(do gen.Dao) *iDGENERATORDo {
	i.DO = *do.(*gen.DO)
	return i
}
