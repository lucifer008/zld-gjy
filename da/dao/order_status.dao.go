// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zld-jy/da/model"
)

func newOrderStatus(db *gorm.DB) orderStatus {
	_orderStatus := orderStatus{}

	_orderStatus.orderStatusDo.UseDB(db)
	_orderStatus.orderStatusDo.UseModel(&model.OrderStatus{})

	tableName := _orderStatus.orderStatusDo.TableName()
	_orderStatus.ALL = field.NewAsterisk(tableName)
	_orderStatus.ID = field.NewInt64(tableName, "Id")
	_orderStatus.OrdID = field.NewInt64(tableName, "Ord_id")
	_orderStatus.OrderStatus = field.NewInt32(tableName, "Order_Status")
	_orderStatus.OrderDesc = field.NewString(tableName, "Order_Desc")
	_orderStatus.Memo = field.NewString(tableName, "Memo")

	_orderStatus.fillFieldMap()

	return _orderStatus
}

type orderStatus struct {
	orderStatusDo orderStatusDo

	ALL         field.Asterisk
	ID          field.Int64  // 订单费用Id
	OrdID       field.Int64  // 订单Id
	OrderStatus field.Int32  // 订单状态(0:草稿 1:已下单 2:已接单 3: 已装货 4: 已签收)
	OrderDesc   field.String // 描述
	Memo        field.String // 备注

	fieldMap map[string]field.Expr
}

func (o orderStatus) Table(newTableName string) *orderStatus {
	o.orderStatusDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderStatus) As(alias string) *orderStatus {
	o.orderStatusDo.DO = *(o.orderStatusDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderStatus) updateTableName(table string) *orderStatus {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "Id")
	o.OrdID = field.NewInt64(table, "Ord_id")
	o.OrderStatus = field.NewInt32(table, "Order_Status")
	o.OrderDesc = field.NewString(table, "Order_Desc")
	o.Memo = field.NewString(table, "Memo")

	o.fillFieldMap()

	return o
}

func (o *orderStatus) WithContext(ctx context.Context) *orderStatusDo {
	return o.orderStatusDo.WithContext(ctx)
}

func (o orderStatus) TableName() string { return o.orderStatusDo.TableName() }

func (o orderStatus) Alias() string { return o.orderStatusDo.Alias() }

func (o *orderStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderStatus) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["Id"] = o.ID
	o.fieldMap["Ord_id"] = o.OrdID
	o.fieldMap["Order_Status"] = o.OrderStatus
	o.fieldMap["Order_Desc"] = o.OrderDesc
	o.fieldMap["Memo"] = o.Memo
}

func (o orderStatus) clone(db *gorm.DB) orderStatus {
	o.orderStatusDo.ReplaceDB(db)
	return o
}

type orderStatusDo struct{ gen.DO }

func (o orderStatusDo) Debug() *orderStatusDo {
	return o.withDO(o.DO.Debug())
}

func (o orderStatusDo) WithContext(ctx context.Context) *orderStatusDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderStatusDo) ReadDB() *orderStatusDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderStatusDo) WriteDB() *orderStatusDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderStatusDo) Clauses(conds ...clause.Expression) *orderStatusDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderStatusDo) Returning(value interface{}, columns ...string) *orderStatusDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderStatusDo) Not(conds ...gen.Condition) *orderStatusDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderStatusDo) Or(conds ...gen.Condition) *orderStatusDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderStatusDo) Select(conds ...field.Expr) *orderStatusDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderStatusDo) Where(conds ...gen.Condition) *orderStatusDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderStatusDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *orderStatusDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o orderStatusDo) Order(conds ...field.Expr) *orderStatusDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderStatusDo) Distinct(cols ...field.Expr) *orderStatusDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderStatusDo) Omit(cols ...field.Expr) *orderStatusDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderStatusDo) Join(table schema.Tabler, on ...field.Expr) *orderStatusDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) *orderStatusDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) *orderStatusDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderStatusDo) Group(cols ...field.Expr) *orderStatusDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderStatusDo) Having(conds ...gen.Condition) *orderStatusDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderStatusDo) Limit(limit int) *orderStatusDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderStatusDo) Offset(offset int) *orderStatusDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *orderStatusDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderStatusDo) Unscoped() *orderStatusDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderStatusDo) Create(values ...*model.OrderStatus) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderStatusDo) CreateInBatches(values []*model.OrderStatus, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderStatusDo) Save(values ...*model.OrderStatus) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderStatusDo) First() (*model.OrderStatus, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderStatus), nil
	}
}

func (o orderStatusDo) Take() (*model.OrderStatus, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderStatus), nil
	}
}

func (o orderStatusDo) Last() (*model.OrderStatus, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderStatus), nil
	}
}

func (o orderStatusDo) Find() ([]*model.OrderStatus, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderStatus), err
}

func (o orderStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderStatus, err error) {
	buf := make([]*model.OrderStatus, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderStatusDo) FindInBatches(result *[]*model.OrderStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderStatusDo) Attrs(attrs ...field.AssignExpr) *orderStatusDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderStatusDo) Assign(attrs ...field.AssignExpr) *orderStatusDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderStatusDo) Joins(fields ...field.RelationField) *orderStatusDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderStatusDo) Preload(fields ...field.RelationField) *orderStatusDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderStatusDo) FirstOrInit() (*model.OrderStatus, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderStatus), nil
	}
}

func (o orderStatusDo) FirstOrCreate() (*model.OrderStatus, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderStatus), nil
	}
}

func (o orderStatusDo) FindByPage(offset int, limit int) (result []*model.OrderStatus, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderStatusDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderStatusDo) Delete(models ...*model.OrderStatus) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderStatusDo) withDO(do gen.Dao) *orderStatusDo {
	o.DO = *do.(*gen.DO)
	return o
}
